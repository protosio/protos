// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/resource.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/protosio/protos/internal/core"
	reflect "reflect"
)

// MockResourceManager is a mock of ResourceManager interface
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockResourceManager) Get(id string) (core.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(core.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockResourceManagerMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceManager)(nil).Get), id)
}

// Delete mocks base method
func (m *MockResourceManager) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockResourceManagerMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceManager)(nil).Delete), id)
}

// GetType mocks base method
func (m *MockResourceManager) GetType(name string) (core.ResourceType, core.ResourceValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType", name)
	ret0, _ := ret[0].(core.ResourceType)
	ret1, _ := ret[1].(core.ResourceValue)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetType indicates an expected call of GetType
func (mr *MockResourceManagerMockRecorder) GetType(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockResourceManager)(nil).GetType), name)
}

// GetAll mocks base method
func (m *MockResourceManager) GetAll(sanitize bool) map[string]core.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", sanitize)
	ret0, _ := ret[0].(map[string]core.Resource)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockResourceManagerMockRecorder) GetAll(sanitize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockResourceManager)(nil).GetAll), sanitize)
}

// Select mocks base method
func (m *MockResourceManager) Select(arg0 func(core.Resource) bool) map[string]core.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(map[string]core.Resource)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockResourceManagerMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockResourceManager)(nil).Select), arg0)
}

// StringToStatus mocks base method
func (m *MockResourceManager) StringToStatus(arg0 string) (core.ResourceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringToStatus", arg0)
	ret0, _ := ret[0].(core.ResourceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StringToStatus indicates an expected call of StringToStatus
func (mr *MockResourceManagerMockRecorder) StringToStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringToStatus", reflect.TypeOf((*MockResourceManager)(nil).StringToStatus), arg0)
}

// CreateDNS mocks base method
func (m *MockResourceManager) CreateDNS(appID, name, rtype, value string, ttl int) (core.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDNS", appID, name, rtype, value, ttl)
	ret0, _ := ret[0].(core.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDNS indicates an expected call of CreateDNS
func (mr *MockResourceManagerMockRecorder) CreateDNS(appID, name, rtype, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDNS", reflect.TypeOf((*MockResourceManager)(nil).CreateDNS), appID, name, rtype, value, ttl)
}

// CreateCert mocks base method
func (m *MockResourceManager) CreateCert(appID string, domains []string) (core.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCert", appID, domains)
	ret0, _ := ret[0].(core.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCert indicates an expected call of CreateCert
func (mr *MockResourceManagerMockRecorder) CreateCert(appID, domains interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCert", reflect.TypeOf((*MockResourceManager)(nil).CreateCert), appID, domains)
}

// CreateFromJSON mocks base method
func (m *MockResourceManager) CreateFromJSON(rscJSON []byte, appID string) (core.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromJSON", rscJSON, appID)
	ret0, _ := ret[0].(core.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFromJSON indicates an expected call of CreateFromJSON
func (mr *MockResourceManagerMockRecorder) CreateFromJSON(rscJSON, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromJSON", reflect.TypeOf((*MockResourceManager)(nil).CreateFromJSON), rscJSON, appID)
}

// MockResource is a mock of Resource interface
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
}

// MockResourceMockRecorder is the mock recorder for MockResource
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockResource) Save() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save")
}

// Save indicates an expected call of Save
func (mr *MockResourceMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockResource)(nil).Save))
}

// GetID mocks base method
func (m *MockResource) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockResourceMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockResource)(nil).GetID))
}

// GetType mocks base method
func (m *MockResource) GetType() core.ResourceType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(core.ResourceType)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockResourceMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockResource)(nil).GetType))
}

// GetValue mocks base method
func (m *MockResource) GetValue() core.ResourceValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(core.ResourceValue)
	return ret0
}

// GetValue indicates an expected call of GetValue
func (mr *MockResourceMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockResource)(nil).GetValue))
}

// UpdateValue mocks base method
func (m *MockResource) UpdateValue(arg0 core.ResourceValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateValue", arg0)
}

// UpdateValue indicates an expected call of UpdateValue
func (mr *MockResourceMockRecorder) UpdateValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValue", reflect.TypeOf((*MockResource)(nil).UpdateValue), arg0)
}

// GetStatus mocks base method
func (m *MockResource) GetStatus() core.ResourceStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(core.ResourceStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockResourceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockResource)(nil).GetStatus))
}

// SetStatus mocks base method
func (m *MockResource) SetStatus(arg0 core.ResourceStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockResourceMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockResource)(nil).SetStatus), arg0)
}

// GetAppID mocks base method
func (m *MockResource) GetAppID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppID indicates an expected call of GetAppID
func (mr *MockResourceMockRecorder) GetAppID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppID", reflect.TypeOf((*MockResource)(nil).GetAppID))
}

// Sanitize mocks base method
func (m *MockResource) Sanitize() core.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sanitize")
	ret0, _ := ret[0].(core.Resource)
	return ret0
}

// Sanitize indicates an expected call of Sanitize
func (mr *MockResourceMockRecorder) Sanitize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sanitize", reflect.TypeOf((*MockResource)(nil).Sanitize))
}

// MockResourceValue is a mock of ResourceValue interface
type MockResourceValue struct {
	ctrl     *gomock.Controller
	recorder *MockResourceValueMockRecorder
}

// MockResourceValueMockRecorder is the mock recorder for MockResourceValue
type MockResourceValueMockRecorder struct {
	mock *MockResourceValue
}

// NewMockResourceValue creates a new mock instance
func NewMockResourceValue(ctrl *gomock.Controller) *MockResourceValue {
	mock := &MockResourceValue{ctrl: ctrl}
	mock.recorder = &MockResourceValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceValue) EXPECT() *MockResourceValueMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockResourceValue) Update(arg0 core.ResourceValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update
func (mr *MockResourceValueMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResourceValue)(nil).Update), arg0)
}

// Sanitize mocks base method
func (m *MockResourceValue) Sanitize() core.ResourceValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sanitize")
	ret0, _ := ret[0].(core.ResourceValue)
	return ret0
}

// Sanitize indicates an expected call of Sanitize
func (mr *MockResourceValueMockRecorder) Sanitize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sanitize", reflect.TypeOf((*MockResourceValue)(nil).Sanitize))
}
