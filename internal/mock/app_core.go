// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/app.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/protosio/protos/internal/core"
	util "github.com/protosio/protos/internal/util"
	reflect "reflect"
)

// MockAppManager is a mock of AppManager interface
type MockAppManager struct {
	ctrl     *gomock.Controller
	recorder *MockAppManagerMockRecorder
}

// MockAppManagerMockRecorder is the mock recorder for MockAppManager
type MockAppManagerMockRecorder struct {
	mock *MockAppManager
}

// NewMockAppManager creates a new mock instance
func NewMockAppManager(ctrl *gomock.Controller) *MockAppManager {
	mock := &MockAppManager{ctrl: ctrl}
	mock.recorder = &MockAppManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppManager) EXPECT() *MockAppManagerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAppManager) Get(name string) (core.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(core.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAppManagerMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppManager)(nil).Get), name)
}

// Create mocks base method
func (m *MockAppManager) Create(installerID, installerVersion, name string, installerParams map[string]string, installerMetadata core.InstallerMetadata) (core.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", installerID, installerVersion, name, installerParams, installerMetadata)
	ret0, _ := ret[0].(core.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAppManagerMockRecorder) Create(installerID, installerVersion, name, installerParams, installerMetadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppManager)(nil).Create), installerID, installerVersion, name, installerParams, installerMetadata)
}

// Delete mocks base method
func (m *MockAppManager) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAppManagerMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppManager)(nil).Delete), name)
}

// Read mocks base method
func (m *MockAppManager) Read(id string) (core.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(core.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockAppManagerMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAppManager)(nil).Read), id)
}

// GetAllPublic mocks base method
func (m *MockAppManager) GetAllPublic() map[string]core.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPublic")
	ret0, _ := ret[0].(map[string]core.App)
	return ret0
}

// GetAllPublic indicates an expected call of GetAllPublic
func (mr *MockAppManagerMockRecorder) GetAllPublic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPublic", reflect.TypeOf((*MockAppManager)(nil).GetAllPublic))
}

// GetCopy mocks base method
func (m *MockAppManager) GetCopy(id string) (core.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCopy", id)
	ret0, _ := ret[0].(core.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCopy indicates an expected call of GetCopy
func (mr *MockAppManagerMockRecorder) GetCopy(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCopy", reflect.TypeOf((*MockAppManager)(nil).GetCopy), id)
}

// Select mocks base method
func (m *MockAppManager) Select(arg0 func(core.App) bool) map[string]core.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(map[string]core.App)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockAppManagerMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockAppManager)(nil).Select), arg0)
}

// CreateDevApp mocks base method
func (m *MockAppManager) CreateDevApp(appName string, installerMetadata core.InstallerMetadata, installerParams map[string]string) (core.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevApp", appName, installerMetadata, installerParams)
	ret0, _ := ret[0].(core.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevApp indicates an expected call of CreateDevApp
func (mr *MockAppManagerMockRecorder) CreateDevApp(appName, installerMetadata, installerParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevApp", reflect.TypeOf((*MockAppManager)(nil).CreateDevApp), appName, installerMetadata, installerParams)
}

// CreateAsync mocks base method
func (m *MockAppManager) CreateAsync(installerID, installerVersion, appName string, installerParams map[string]string, startOnCreation bool) core.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsync", installerID, installerVersion, appName, installerParams, startOnCreation)
	ret0, _ := ret[0].(core.Task)
	return ret0
}

// CreateAsync indicates an expected call of CreateAsync
func (mr *MockAppManagerMockRecorder) CreateAsync(installerID, installerVersion, appName, installerParams, startOnCreation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsync", reflect.TypeOf((*MockAppManager)(nil).CreateAsync), installerID, installerVersion, appName, installerParams, startOnCreation)
}

// Remove mocks base method
func (m *MockAppManager) Remove(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockAppManagerMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockAppManager)(nil).Remove), id)
}

// RemoveAsync mocks base method
func (m *MockAppManager) RemoveAsync(arg0 string) core.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAsync", arg0)
	ret0, _ := ret[0].(core.Task)
	return ret0
}

// RemoveAsync indicates an expected call of RemoveAsync
func (mr *MockAppManagerMockRecorder) RemoveAsync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAsync", reflect.TypeOf((*MockAppManager)(nil).RemoveAsync), arg0)
}

// GetServices mocks base method
func (m *MockAppManager) GetServices() []util.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices")
	ret0, _ := ret[0].([]util.Service)
	return ret0
}

// GetServices indicates an expected call of GetServices
func (mr *MockAppManagerMockRecorder) GetServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockAppManager)(nil).GetServices))
}

// CopyAll mocks base method
func (m *MockAppManager) CopyAll() map[string]core.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyAll")
	ret0, _ := ret[0].(map[string]core.App)
	return ret0
}

// CopyAll indicates an expected call of CopyAll
func (mr *MockAppManagerMockRecorder) CopyAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyAll", reflect.TypeOf((*MockAppManager)(nil).CopyAll))
}

// MockApp is a mock of App interface
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockApp) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockAppMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockApp)(nil).Start))
}

// Stop mocks base method
func (m *MockApp) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockAppMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockApp)(nil).Stop))
}

// GetID mocks base method
func (m *MockApp) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockAppMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockApp)(nil).GetID))
}

// GetName mocks base method
func (m *MockApp) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockAppMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockApp)(nil).GetName))
}

// GetIP mocks base method
func (m *MockApp) GetIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIP indicates an expected call of GetIP
func (mr *MockAppMockRecorder) GetIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockApp)(nil).GetIP))
}

// AddTask mocks base method
func (m *MockApp) AddTask(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTask", id)
}

// AddTask indicates an expected call of AddTask
func (mr *MockAppMockRecorder) AddTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockApp)(nil).AddTask), id)
}

// ValidateCapability mocks base method
func (m *MockApp) ValidateCapability(cap core.Capability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCapability", cap)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCapability indicates an expected call of ValidateCapability
func (mr *MockAppMockRecorder) ValidateCapability(cap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCapability", reflect.TypeOf((*MockApp)(nil).ValidateCapability), cap)
}

// Provides mocks base method
func (m *MockApp) Provides(resourceType string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provides", resourceType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Provides indicates an expected call of Provides
func (mr *MockAppMockRecorder) Provides(resourceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provides", reflect.TypeOf((*MockApp)(nil).Provides), resourceType)
}

// ReplaceContainer mocks base method
func (m *MockApp) ReplaceContainer(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceContainer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceContainer indicates an expected call of ReplaceContainer
func (mr *MockAppMockRecorder) ReplaceContainer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceContainer", reflect.TypeOf((*MockApp)(nil).ReplaceContainer), id)
}

// AddAction mocks base method
func (m *MockApp) AddAction(action string) (core.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAction", action)
	ret0, _ := ret[0].(core.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAction indicates an expected call of AddAction
func (mr *MockAppMockRecorder) AddAction(action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAction", reflect.TypeOf((*MockApp)(nil).AddAction), action)
}

// GetResources mocks base method
func (m *MockApp) GetResources() map[string]core.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources")
	ret0, _ := ret[0].(map[string]core.Resource)
	return ret0
}

// GetResources indicates an expected call of GetResources
func (mr *MockAppMockRecorder) GetResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockApp)(nil).GetResources))
}

// GetResource mocks base method
func (m *MockApp) GetResource(id string) (core.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", id)
	ret0, _ := ret[0].(core.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource
func (mr *MockAppMockRecorder) GetResource(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockApp)(nil).GetResource), id)
}

// CreateResource mocks base method
func (m *MockApp) CreateResource(jsonPayload []byte) (core.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", jsonPayload)
	ret0, _ := ret[0].(core.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource
func (mr *MockAppMockRecorder) CreateResource(jsonPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockApp)(nil).CreateResource), jsonPayload)
}

// DeleteResource mocks base method
func (m *MockApp) DeleteResource(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource
func (mr *MockAppMockRecorder) DeleteResource(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockApp)(nil).DeleteResource), id)
}

// SetStatus mocks base method
func (m *MockApp) SetStatus(status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", status)
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockAppMockRecorder) SetStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockApp)(nil).SetStatus), status)
}

// GetStatus mocks base method
func (m *MockApp) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockAppMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockApp)(nil).GetStatus))
}

// SetMsgQ mocks base method
func (m *MockApp) SetMsgQ(msgq *core.WSConnection) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMsgQ", msgq)
}

// SetMsgQ indicates an expected call of SetMsgQ
func (mr *MockAppMockRecorder) SetMsgQ(msgq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMsgQ", reflect.TypeOf((*MockApp)(nil).SetMsgQ), msgq)
}

// CloseMsgQ mocks base method
func (m *MockApp) CloseMsgQ() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseMsgQ")
}

// CloseMsgQ indicates an expected call of CloseMsgQ
func (mr *MockAppMockRecorder) CloseMsgQ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseMsgQ", reflect.TypeOf((*MockApp)(nil).CloseMsgQ))
}

// Public mocks base method
func (m *MockApp) Public() core.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Public")
	ret0, _ := ret[0].(core.App)
	return ret0
}

// Public indicates an expected call of Public
func (mr *MockAppMockRecorder) Public() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Public", reflect.TypeOf((*MockApp)(nil).Public))
}

// MockWSPublisher is a mock of WSPublisher interface
type MockWSPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockWSPublisherMockRecorder
}

// MockWSPublisherMockRecorder is the mock recorder for MockWSPublisher
type MockWSPublisherMockRecorder struct {
	mock *MockWSPublisher
}

// NewMockWSPublisher creates a new mock instance
func NewMockWSPublisher(ctrl *gomock.Controller) *MockWSPublisher {
	mock := &MockWSPublisher{ctrl: ctrl}
	mock.recorder = &MockWSPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWSPublisher) EXPECT() *MockWSPublisherMockRecorder {
	return m.recorder
}

// GetWSPublishChannel mocks base method
func (m *MockWSPublisher) GetWSPublishChannel() chan interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWSPublishChannel")
	ret0, _ := ret[0].(chan interface{})
	return ret0
}

// GetWSPublishChannel indicates an expected call of GetWSPublishChannel
func (mr *MockWSPublisherMockRecorder) GetWSPublishChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWSPublishChannel", reflect.TypeOf((*MockWSPublisher)(nil).GetWSPublishChannel))
}
