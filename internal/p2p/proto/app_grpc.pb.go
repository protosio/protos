// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: internal/p2p/proto/app.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Apps_GetAppLogs_FullMethodName   = "/proto.Apps/GetAppLogs"
	Apps_GetAppStatus_FullMethodName = "/proto.Apps/GetAppStatus"
)

// AppsClient is the client API for Apps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsClient interface {
	GetAppLogs(ctx context.Context, in *GetAppLogsRequest, opts ...grpc.CallOption) (*GetAppLogsResponse, error)
	GetAppStatus(ctx context.Context, in *GetAppStatusRequest, opts ...grpc.CallOption) (*GetAppStatusResponse, error)
}

type appsClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsClient(cc grpc.ClientConnInterface) AppsClient {
	return &appsClient{cc}
}

func (c *appsClient) GetAppLogs(ctx context.Context, in *GetAppLogsRequest, opts ...grpc.CallOption) (*GetAppLogsResponse, error) {
	out := new(GetAppLogsResponse)
	err := c.cc.Invoke(ctx, Apps_GetAppLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) GetAppStatus(ctx context.Context, in *GetAppStatusRequest, opts ...grpc.CallOption) (*GetAppStatusResponse, error) {
	out := new(GetAppStatusResponse)
	err := c.cc.Invoke(ctx, Apps_GetAppStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsServer is the server API for Apps service.
// All implementations should embed UnimplementedAppsServer
// for forward compatibility
type AppsServer interface {
	GetAppLogs(context.Context, *GetAppLogsRequest) (*GetAppLogsResponse, error)
	GetAppStatus(context.Context, *GetAppStatusRequest) (*GetAppStatusResponse, error)
}

// UnimplementedAppsServer should be embedded to have forward compatible implementations.
type UnimplementedAppsServer struct {
}

func (UnimplementedAppsServer) GetAppLogs(context.Context, *GetAppLogsRequest) (*GetAppLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppLogs not implemented")
}
func (UnimplementedAppsServer) GetAppStatus(context.Context, *GetAppStatusRequest) (*GetAppStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppStatus not implemented")
}

// UnsafeAppsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsServer will
// result in compilation errors.
type UnsafeAppsServer interface {
	mustEmbedUnimplementedAppsServer()
}

func RegisterAppsServer(s grpc.ServiceRegistrar, srv AppsServer) {
	s.RegisterService(&Apps_ServiceDesc, srv)
}

func _Apps_GetAppLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).GetAppLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_GetAppLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).GetAppLogs(ctx, req.(*GetAppLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_GetAppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).GetAppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_GetAppStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).GetAppStatus(ctx, req.(*GetAppStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Apps_ServiceDesc is the grpc.ServiceDesc for Apps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Apps",
	HandlerType: (*AppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppLogs",
			Handler:    _Apps_GetAppLogs_Handler,
		},
		{
			MethodName: "GetAppStatus",
			Handler:    _Apps_GetAppStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/p2p/proto/app.proto",
}
