// // Code generated by MockGen. DO NOT EDIT.
// // Source: internal/app/app.go

// // Package app is a generated GoMock package.
package app

// import (
// 	core "github.com/protosio/protos/internal/core"
// 	reflect "reflect"

// 	gomock "github.com/golang/mock/gomock"
// )

// // MockappParent is a mock of appParent interface
// type MockappParent struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockappParentMockRecorder
// }

// // MockappParentMockRecorder is the mock recorder for MockappParent
// type MockappParentMockRecorder struct {
// 	mock *MockappParent
// }

// // NewMockappParent creates a new mock instance
// func NewMockappParent(ctrl *gomock.Controller) *MockappParent {
// 	mock := &MockappParent{ctrl: ctrl}
// 	mock.recorder = &MockappParentMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use
// func (m *MockappParent) EXPECT() *MockappParentMockRecorder {
// 	return m.recorder
// }

// // Remove mocks base method
// func (m *MockappParent) Remove(appID string) error {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "Remove", appID)
// 	ret0, _ := ret[0].(error)
// 	return ret0
// }

// // Remove indicates an expected call of Remove
// func (mr *MockappParentMockRecorder) Remove(appID interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockappParent)(nil).Remove), appID)
// }

// // saveApp mocks base method
// func (m *MockappParent) saveApp(app *App) {
// 	m.ctrl.T.Helper()
// 	m.ctrl.Call(m, "saveApp", app)
// }

// // saveApp indicates an expected call of saveApp
// func (mr *MockappParentMockRecorder) saveApp(app interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveApp", reflect.TypeOf((*MockappParent)(nil).saveApp), app)
// }

// // getPlatform mocks base method
// func (m *MockappParent) getPlatform() core.RuntimePlatform {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "getPlatform")
// 	ret0, _ := ret[0].(core.RuntimePlatform)
// 	return ret0
// }

// // getPlatform indicates an expected call of getPlatform
// func (mr *MockappParentMockRecorder) getPlatform() *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPlatform", reflect.TypeOf((*MockappParent)(nil).getPlatform))
// }

// // getTaskManager mocks base method
// func (m *MockappParent) getTaskManager() core.TaskManager {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "getTaskManager")
// 	ret0, _ := ret[0].(core.TaskManager)
// 	return ret0
// }

// // getTaskManager indicates an expected call of getTaskManager
// func (mr *MockappParentMockRecorder) getTaskManager() *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTaskManager", reflect.TypeOf((*MockappParent)(nil).getTaskManager))
// }

// // getResourceManager mocks base method
// func (m *MockappParent) getResourceManager() core.ResourceManager {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "getResourceManager")
// 	ret0, _ := ret[0].(core.ResourceManager)
// 	return ret0
// }

// // getResourceManager indicates an expected call of getResourceManager
// func (mr *MockappParentMockRecorder) getResourceManager() *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getResourceManager", reflect.TypeOf((*MockappParent)(nil).getResourceManager))
// }

// // getCapabilityManager mocks base method
// func (m *MockappParent) getCapabilityManager() core.CapabilityManager {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "getCapabilityManager")
// 	ret0, _ := ret[0].(core.CapabilityManager)
// 	return ret0
// }

// // getCapabilityManager indicates an expected call of getCapabilityManager
// func (mr *MockappParentMockRecorder) getCapabilityManager() *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCapabilityManager", reflect.TypeOf((*MockappParent)(nil).getCapabilityManager))
// }
