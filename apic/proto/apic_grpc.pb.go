// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtosClientApiClient is the client API for ProtosClientApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtosClientApiClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error)
}

type protosClientApiClient struct {
	cc grpc.ClientConnInterface
}

func NewProtosClientApiClient(cc grpc.ClientConnInterface) ProtosClientApiClient {
	return &protosClientApiClient{cc}
}

func (c *protosClientApiClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/apic.ProtosClientApi/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protosClientApiClient) GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error) {
	out := new(GetAppsResponse)
	err := c.cc.Invoke(ctx, "/apic.ProtosClientApi/GetApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtosClientApiServer is the server API for ProtosClientApi service.
// All implementations must embed UnimplementedProtosClientApiServer
// for forward compatibility
type ProtosClientApiServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error)
	mustEmbedUnimplementedProtosClientApiServer()
}

// UnimplementedProtosClientApiServer must be embedded to have forward compatible implementations.
type UnimplementedProtosClientApiServer struct {
}

func (UnimplementedProtosClientApiServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedProtosClientApiServer) GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (UnimplementedProtosClientApiServer) mustEmbedUnimplementedProtosClientApiServer() {}

// UnsafeProtosClientApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtosClientApiServer will
// result in compilation errors.
type UnsafeProtosClientApiServer interface {
	mustEmbedUnimplementedProtosClientApiServer()
}

func RegisterProtosClientApiServer(s grpc.ServiceRegistrar, srv ProtosClientApiServer) {
	s.RegisterService(&ProtosClientApi_ServiceDesc, srv)
}

func _ProtosClientApi_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtosClientApiServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apic.ProtosClientApi/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtosClientApiServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtosClientApi_GetApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtosClientApiServer).GetApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apic.ProtosClientApi/GetApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtosClientApiServer).GetApps(ctx, req.(*GetAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtosClientApi_ServiceDesc is the grpc.ServiceDesc for ProtosClientApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtosClientApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apic.ProtosClientApi",
	HandlerType: (*ProtosClientApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _ProtosClientApi_Init_Handler,
		},
		{
			MethodName: "GetApps",
			Handler:    _ProtosClientApi_GetApps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apic.proto",
}
