// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	GetApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AppService_GetAppsClient, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) GetApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AppService_GetAppsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppService_ServiceDesc.Streams[0], "/apic.AppService/GetApps", opts...)
	if err != nil {
		return nil, err
	}
	x := &appServiceGetAppsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppService_GetAppsClient interface {
	Recv() (*App, error)
	grpc.ClientStream
}

type appServiceGetAppsClient struct {
	grpc.ClientStream
}

func (x *appServiceGetAppsClient) Recv() (*App, error) {
	m := new(App)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	GetApps(*emptypb.Empty, AppService_GetAppsServer) error
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) GetApps(*emptypb.Empty, AppService_GetAppsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_GetApps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppServiceServer).GetApps(m, &appServiceGetAppsServer{stream})
}

type AppService_GetAppsServer interface {
	Send(*App) error
	grpc.ServerStream
}

type appServiceGetAppsServer struct {
	grpc.ServerStream
}

func (x *appServiceGetAppsServer) Send(m *App) error {
	return x.ServerStream.SendMsg(m)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apic.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetApps",
			Handler:       _AppService_GetApps_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/apic.proto",
}
